const jwt = require('jsonwebtoken');

// ‚úÖ Middleware: Ki·ªÉm tra x√°c th·ª±c ng∆∞·ªùi d√πng qua token
const authenticate = (req, res, next) => {
    const authHeader = req.headers.authorization;

    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return res.status(401).json({ message: 'Ch∆∞a x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p.' });
    }

    const token = authHeader.split(' ')[1];

    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        req.user = decoded; // G·∫Øn th√¥ng tin user t·ª´ token v√†o request
        console.log('üîë req.user:', req.user);

        next();
    } catch (error) {
        return res.status(401).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.' });
    }
};

// ‚úÖ Middleware: Ch·ªâ cho ph√©p Admin truy c·∫≠p
const isAdmin = (req, res, next) => {
    if (req.user && req.user.role === 'admin') {
        return next();
    }
    return res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Ch·ªâ Admin ƒë∆∞·ª£c ph√©p.' });
};

// ‚úÖ Middleware: Ch·ªâ cho ph√©p Qu·∫£n l√Ω ƒë∆°n v·ªã truy c·∫≠p
const isManager = (req, res, next) => {
    if (req.user && req.user.role === 'manager') {
        return next();
    }
    return res.status(403).json({ message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Ch·ªâ Qu·∫£n l√Ω ƒë∆°n v·ªã ƒë∆∞·ª£c ph√©p.' });
};

// ‚úÖ Middleware: Ch·ªâ cho ph√©p ng∆∞·ªùi d√πng xem th√¥ng tin c·ªßa ch√≠nh h·ªç
const isSelf = (req, res, next) => {
    const requestedMaNv = req.params.ma_nv?.toUpperCase();
    const loggedInMaNv = req.user?.ma_nv?.toUpperCase();

    if (requestedMaNv === loggedInMaNv) {
        return next();
    }

    return res.status(403).json({ message: 'Ch·ªâ ƒë∆∞·ª£c ph√©p truy c·∫≠p th√¥ng tin c√° nh√¢n c·ªßa ch√≠nh b·∫°n.' });
};

module.exports = {
    authenticate,
    isAdmin,
    isManager,
    isSelf
};
